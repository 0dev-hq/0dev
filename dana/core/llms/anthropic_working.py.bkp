import logging
import json
from typing import Optional, Type, TypeVar, Union
from anthropic import Anthropic
from pydantic import BaseModel
from .base_llm import BaseLLM


logger = logging.getLogger(__name__)
T = TypeVar("T", bound=BaseModel)


class AnthropicClient(BaseLLM):
    def __init__(self, api_key: str, model: str = "claude-3-sonnet-20240229"):
        self.api_key = api_key
        self.client = Anthropic(api_key=api_key)
        self.model = model

    def answer(
        self,
        prompt: list[dict],
        formatter: Optional[Type[T]] = None,
    ) -> Union[T, str]:
        """
        Calls the Anthropic API with the provided messages and returns the response.
        If a formatter is provided, includes formatting instructions in the prompt.

        Args:
            prompt: The chat messages to send to the model.
            formatter: Optional Pydantic model to parse the response into.

        Returns:
            Parsed response as the formatter instance or plain string.
        """
        # Convert OpenAI-style messages to Anthropic format
        messages = []
        for msg in prompt:
            role = "assistant" if msg["role"] == "assistant" else "user"
            messages.append({"role": role, "content": msg["content"]})

        if formatter:
            # Add formatting instructions to the last message
            schema = formatter.model_json_schema()
            tools = [
                {
                    "name": "build_formatted_result",
                    "description": "build the result with the given schema",
                    "input_schema": schema,
                }
            ]

            format_instruction = (
                "Please provide your response in the following format:\n"
                f"{json.dumps(schema, indent=2)}\n"
                "Ensure the response matches this schema exactly."
            )

            if messages[-1]["role"] == "user":
                messages[-1]["content"] += "\n\n" + format_instruction
            else:
                messages.append({"role": "user", "content": format_instruction})

            completion = self.client.messages.create(
                model=self.model,
                messages=messages,
                max_tokens=2000,
                tools=tools,
                tool_choice={"type": "tool", "name": "build_formatted_result"},
            )
            try:
                response_text = completion.content[0].input
                return formatter.model_validate(response_text)
            except Exception as e:
                logger.error(f"Failed to parse response as {formatter.__name__}: {e}")
                logger.error(f"Raw response: {response_text}")
                raise ValueError(f"Failed to parse response as {formatter.__name__}")

        # Make the API call
        completion = self.client.messages.create(
            model=self.model,
            messages=messages,
            max_tokens=2000,
        )

        response_text = completion.content[0].text

        return response_text
